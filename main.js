!function(){"use strict";class e{constructor(e,t){let{items:n,renderer:s}=e;this._items=n,this._renderer=s,this._container=document.querySelector(t)}addItem(e){this._container.prepend(e)}renderItems(){this._items.forEach(this._renderer)}}class t{constructor(e,t,n,s,r,i){this._name=e.name,this._link=e.link,this._cardSelector=t,this._popupWithImage=n,this._handleCardClick=s,this._handleDeleteCallback=r,this._api=i,this._id=e._id,this._isLiked=e.isLiked}_setEventListeners(){this._deleteButton=this._cardElement.querySelector(".content__card-delete-button"),this._imageContainer=this._cardElement.querySelector(".content__card-image"),this._cardImage.addEventListener("click",(()=>{this._handleImageClick()})),this._likeButton.addEventListener("click",(()=>{this._handleLikeIcon()})),this._deleteButton.addEventListener("click",(()=>{this._handleDeleteCallback(this._cardElement)}))}_handleLikeIcon(){this._likeButton.classList.contains("content__card-like-button_clicked")?this._api.removeLike(this._id).then((()=>{this._likeButton.classList.remove("content__card-like-button_clicked")})).catch((e=>{console.error("Error removing like:",e)})):this._api.addLike(this._id).then((()=>{this._likeButton.classList.add("content__card-like-button_clicked")})).catch((e=>{console.error("error adding like:",e)}))}_handleImageClick(){this._handleCardClick(this._name,this._link)}getView(){return this._cardElement=document.querySelector(this._cardSelector).content.querySelector(".content__card").cloneNode(!0),this._cardTitle=this._cardElement.querySelector(".content__card-text"),this._cardImage=this._cardElement.querySelector(".content__card-image"),this._likeButton=this._cardElement.querySelector(".content__card-like-button"),this._renderCard(),this._setEventListeners(),this._cardElement}_renderCard(){this._cardTitle.textContent=this._name,this._cardImage.src=this._link,this._cardImage.alt=this._name,this._isLiked?this._likeButton.classList.add("content__card-like-button_clicked"):this._likeButton.classList.remove("content__card-like-button_clicked")}}class n{constructor(e,t){this._formElement=t,this._formSelector=e.formSelector,this._inputSelector=e.inputSelector,this._submitButton=this._formElement.querySelector(e.submitButtonSelector),this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._inputElements=[...this._formElement.querySelectorAll(this._inputSelector)]}_showInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage}_hideInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent=""}_checkFormValidity(){return this._inputElements.every((e=>e.validity.valid))}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}toggleButtonState(){this._checkFormValidity()?(this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1):(this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0)}resetValidation(){this.toggleButtonState(),this._inputElements.forEach((e=>{this._hideInputError(e)}))}_setEventListeners(){this._inputElements.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this.toggleButtonState()}))}))}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}const s=document.querySelector(".profile__edit-button"),r=document.querySelector(".profile__add-button"),i=(document.querySelector('input[name="name"]'),document.querySelector('input[name="description"]'),document.querySelector(".profile__info-name"),document.querySelector(".profile__info-description"),document.querySelector(".profile__picture_edit_button"));document.querySelector('input[name="title"]'),document.querySelector('input[name="link"]');class o{constructor(e){let{popupSelector:t}=e;this._popupElement=document.querySelector(t)}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this.closeModalByEscape),document.addEventListener("click",this.closeModalOnRemoteClick)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this.closeModalByEscape),document.removeEventListener("click",this.closeModalOnRemoteClick)}closeModalByEscape=e=>{"Escape"===e.key&&this.close()};closeModalOnRemoteClick=e=>{e.target.classList.contains("modal_opened")&&this.close()};setEventListeners(){this._closeButton=this._popupElement.querySelector(".modal__exit-button"),this._closeButton.addEventListener("click",(()=>this.close()))}}class a extends o{constructor(e,t){super({popupSelector:e}),this._handleSubmit=t,this._form=this._popupElement.querySelector("form"),this._button=this._form.querySelector("button"),this._submitButtonText=this._button.textContent,this._inputList=[...this._form.querySelectorAll("input")]}reset(){this._form&&this._form.reset()}close=()=>{super.close(),this.reset()};_getInputValues(){const e={};for(const t of this._inputList)e[t.name]=t.value;return e}renderLoading(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...";this._button.textContent=e?t:this._submitButtonText}setInputValues(e){this._inputList.forEach((t=>{t.value=e[t.name]}))}setEventListeners(){super.setEventListeners(),this._popupElement.addEventListener("submit",(e=>{e.preventDefault(),this._handleSubmit(this._getInputValues())}))}}const l={};let c;function u(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"Saving...";t.renderLoading(!0,n),e().then((()=>{t.close()})).catch(console.error).finally((()=>{t.renderLoading(!1)}))}const d=e=>{const n=new t(e,"#card-template",m,((e,t)=>m.open(e,t)),(t=>{f.open(t,e._id)}),h);c.addItem(n.getView())},h=new class{constructor(e){this._url=e.baseUrl,this._headers=e.headers}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}_request(e,t){return fetch(e,t).then(this._checkResponse)}getInitialCards(){return this._request(`${this._url}/cards`,{headers:this._headers})}getUserInfo(){return this._request(`${this._url}/users/me`,{headers:this._headers})}updateUserInfo(e){return this._request(`${this._url}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e.name,about:e.about})})}updateAvatar(e){return this._request(`${this._url}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})})}addNewCard(e){return this._request(`${this._url}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:e.name,link:e.link})})}getInitialData(){return Promise.all([this.getUserInfo(),this.getInitialCards()])}deleteCard(e){return this._request(`${this._url}/cards/${e}`,{method:"DELETE",headers:this._headers})}addLike(e){return this._request(`${this._url}/cards/${e}/likes`,{method:"PUT",headers:this._headers})}removeLike(e){return this._request(`${this._url}/cards/${e}/likes`,{method:"DELETE",headers:this._headers})}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"d56fe388-1e54-4c89-a64c-cf770afe6bc4","Content-Type":"application/json"}});h.getUserInfo().then((e=>{_.setUserInfo({name:e.name,about:e.about,avatar:e.avatar})})).catch((e=>{console.error("Error fetching user data:",e)})),h.getInitialCards().then((t=>{c=new e({items:t.reverse(),renderer:d},".content"),c.renderItems()})).catch((e=>{console.error("Error fetching cards:",e)}));const _=new class{constructor(e){let{nameSelector:t,aboutSelector:n,avatarSelector:s}=e;this._nameElement=document.querySelector(t),this._aboutElement=document.querySelector(n),this._avatarElement=document.querySelector(s)}getUserInfo(){return{name:this._nameElement.textContent,about:this._aboutElement.textContent,avatar:this._avatarElement.src}}setUserInfo(e){let{name:t,about:n,avatar:s}=e;this._nameElement.textContent=t,this._aboutElement.textContent=n,this._avatarElement.src=s}}({nameSelector:".profile__info-name",aboutSelector:".profile__info-description",avatarSelector:".profile__picture"}),m=new class extends o{constructor(e){let{popupSelector:t}=e;super({popupSelector:t}),this._imagePreview=this._popupElement.querySelector(".modal__card-image"),this._imagePreviewTitle=this._popupElement.querySelector(".modal__image-title")}open(e,t){this._imagePreview.src=t,this._imagePreview.alt=e,this._imagePreviewTitle.textContent=e,super.open()}}({popupSelector:"#image-popup"}),p=new a("#edit_profile_modal",(e=>{let{name:t,about:n}=e;return function(e,t){u((function(){return h.updateUserInfo({name:e,about:t}).then((e=>{_.setUserInfo({name:e.name,about:e.about,avatar:e.avatar})}))}),p)}(t,n)})),E=new a("#change_avatar",(e=>{let{link:t}=e;return function(e){u((function(){return h.updateAvatar(e).then((e=>{_.setUserInfo(e)}))}),E)}(t)})),v=new a("#add_image_modal",(e=>{let{title:t,link:n}=e;!function(e,t){u((function(){return h.addNewCard({name:e,link:t}).then(d)}),v)}(t,n)})),f=new class extends o{constructor(e,t){super({popupSelector:e}),this._handleSubmit=t,this._form=this._popupElement.querySelector("form"),this._button=this._form.querySelector("button"),this._submitButtonText=this._button.textContent}open(e,t){this._cardElement=e,this._cardID=t,super.open()}renderLoading(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Removing...";this._button.textContent=e?t:this._submitButtonText}setEventListeners(){super.setEventListeners(),this._popupElement.addEventListener("submit",(e=>{e.preventDefault(),this._handleSubmit(this._cardElement,this._cardID)}))}}("#delete-popup",(function(e,t){u((function(){return h.deleteCard(t).then((()=>{e.remove(),e=null}))}),f)}));var b;f.setEventListeners(),p.setEventListeners(),v.setEventListeners(),m.setEventListeners(),E.setEventListeners(),b={formSelector:".modal__form",inputSelector:".modal__form-input",submitButtonSelector:".modal__submit-button",inactiveButtonClass:"modal__submit-button-inactive",inputErrorClass:"modal__input_type_error"},[...document.querySelectorAll(b.formSelector)].forEach((e=>{const t=new n(b,e),s=e.getAttribute("name");l[s]=t,t.enableValidation()})),s.addEventListener("click",(()=>{l["profile-form"].resetValidation(),(()=>{const{name:e,about:t}=_.getUserInfo();p.setInputValues({name:e,about:t})})(),p.open()})),i.addEventListener("click",(()=>{l["change-avatar-form"].resetValidation(),E.open()})),r.addEventListener("click",(()=>{l["add-image-form"].resetValidation(),v.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,